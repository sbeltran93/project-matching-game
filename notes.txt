USER STORIES



Define constants -
* const numbers []
* const cards or board?
* cost winning matches

Define variables -
* Define a variable for the user's choice
* Define a variable for the player 2 choice
* Define a variable for the game message - whether they got a match, other players turn, try again, congrats you won, you lost try again, etc.
* Define a variable for winner


Select and save (cache) elements in variables that need to be accessed in the JavaScript code more than once. -
* numbers
* cards? board? squares?
* reset
* message


Add event listeners - use delegated event listeners to listen to multiple elements with a single listener. -
* Add an event listener to each number used in memory game
* Add an event listener to each card to on click
* Add event listener for reset
* Add event listener for message


Invoke the init function used to initialize all state variables. -
* board
* turn
* winner


Invoke the primary render function that transfers all state variables to the DOM. -
* start of game
* on click
* reset
* player turn



Wait for the user to click on a button. -
* winning combinations for matches

Update all state variables with the correct values depending on the user’s choice.
Invoke the primary render function.


Wait for the user to click the “Play Again” button. -
* Invoke the init function to reset all state variables to their initial values.
* reset user and players choice to nothing ""
* reset paired matches to nothing (no matches) ""
* reset cards to flip 

Function -
* Create a flip function to make cards flip on click





function winningMatches () {
    if ('.card 1' === '.card 1') {
        match = true
    } else if ('.card 2' === '.card 2') {
        match = true
    } else if ('.card 3' === '.card 3') {
        match = true    
    } else if ('.card 4' === '.card 4') {
        match = true
    } else if ('.card 5' === '.card 5') {
        match = true
    } else if ('.card 6' === '.card 6') {
        match = true
    } else if ('.card 7' === '.card 7') {
        match = true
    } else if ('.card 8' === '.card 8') {
        match = true   
    }   else  
        match = false                                        
}



<h1>Front Card</h1></div>
        <div class="back">
            <h1>Back card</h1><div>
            </div>
        </div>  




        .front {
    position: absolute;
    width: 5%;
    height: 10%;
    backface-visibility: hidden;
    background: #ffc728;
    color: #000;    
    text-align: center;
}
.back {
    position: absolute;
    width: 5%;
    height: 5%;
    backface-visibility: hidden;
    background: purple;
    color: white;
    text-align: center;
    transform: rotateY('180deg');
}

.card.flipped {
    transform: rotateY('180deg');
}




DONT THINK I NEED THIS BUT JUST IN CASE

/*
function compareCards(a, b) {
    if(firstCard === secondCard) {
        messageEl.textContent = `You have a match!`
    } else 
        messageEl.textContent = `Try Again`
    console.log(compareCards)
}

function winningMatches () {
    if (card === card) {
        MatchCountEl += true 
    } else if (card !== card) {
        match = false  
    }   else  
        match = false                                        
}
    */


    /*
function shuffle(array) {
    let currentIndex = array.length;
  
    // While there remain elements to shuffle...
    while (currentIndex != 0) {
  
      // Pick a remaining element...
      let randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex--;
  
      // And swap it with the current element.
      [array[currentIndex], array[randomIndex]] = [
        array[randomIndex], array[currentIndex]];
    } return array
  }
    */



    /*
function updateCards (event) {
    if(firstCard && player) {
        secondCard += event.target.id;
        result = secondCard
    } else {
        firstCard += event.target.id;
        result = secondCard

    }
    render()
} */